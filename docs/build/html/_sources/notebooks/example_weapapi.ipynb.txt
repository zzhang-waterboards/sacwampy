{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "7dd90ea8",
   "metadata": {},
   "source": [
    "# WEAP API Example\n",
    "\n",
    "## Load weapapi    "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7a7395d7",
   "metadata": {},
   "source": [
    "Note that the correct version of WEAP needs to be open before we run any modules or functions. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "aff13628",
   "metadata": {},
   "outputs": [],
   "source": [
    "import weapapi"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "457a1fa0",
   "metadata": {},
   "source": [
    "## WEAP branch\n",
    "One way to interact with WEAP api is through branches. \n",
    "WEAP branch has two possible styles: with variable and without variable. \n",
    "Example branch (with variable):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "480f679d",
   "metadata": {},
   "outputs": [],
   "source": [
    "branch1 = \"Other\\Ops\\CVPSWP\\CVP Allocations\\System\\WaterSupplyEst:Annual Activity Level\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9def19e3",
   "metadata": {},
   "source": [
    "Example branch (without variable):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fa85e384",
   "metadata": {},
   "outputs": [],
   "source": [
    "branch2 = \"Supply and Resources\\River\\American River\\Reservoirs\\Folsom Lake\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "667b7a74",
   "metadata": {},
   "source": [
    "When the branch only has one variable, most of the time it is \"Annual Activity Level\", but if the branch has more than one variables, you can obtain a list of variables through:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8e634e59",
   "metadata": {},
   "outputs": [],
   "source": [
    "varname = weapapi.get_varnames(branch2,result=None)  # this will return all the variables in the branch\n",
    "varname"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9fb4d997",
   "metadata": {},
   "source": [
    "Note that not all variables are visible from the WEAP GUI. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e6bcc797",
   "metadata": {},
   "source": [
    "## Retrieving inputs and results by branch\n",
    "The following can be used to both retrieve input and output variables. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3a80825f",
   "metadata": {},
   "outputs": [],
   "source": [
    "value, unit = weapapi.read_value(branch1,2000,12,'Existing') #retrieve a single value \n",
    "scenario = \"Existing\"\n",
    "df = weapapi.read_value_ts(branch1,scenario,start_date='1996-01-01',end_date='2000-12-01') #retrieve a timeseries\n",
    "df.head()\n",
    "\n",
    "value_sum,unit = weapapi.read_value_stats(branch1,scenario,start_wy=1996,start_ts=1,end_wy=1998,end_ts=12) # sum value for the period\n",
    "value_avg,unit = weapapi.read_value_stats(branch1,scenario,start_wy=1996,start_ts=1,\n",
    "                                          end_wy=1998,end_ts=12,method='average') # average value for the period\n",
    "value_pct,unit = weapapi.read_value_stats(branch1,scenario,start_wy=1996,start_ts=1,\n",
    "                                          end_wy=1998,end_ts=12,method='percentile',percentage=\"0.3\") # 30% percentile for the period"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "143cab38",
   "metadata": {},
   "source": [
    "## Export favorite\n",
    "Occassionally, we may wish to output a large number of timeseries (N>100) and it is more effeicient to output them as a favorite. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c5dfa1a2",
   "metadata": {},
   "outputs": [],
   "source": [
    "favorite = \"GW Storage\"\n",
    "filename = \"GW_Storage_%s.csv\"%scenario\n",
    "run = \"2024-10-24 (1)\"\n",
    "export_favorite(favorite,scenario,filename) #output favorite for current run. \n",
    "export_favorite(favorite,scenario,filename,run=run) #output favorite for a selected run (current or archived).  "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "60b6080f",
   "metadata": {},
   "source": [
    "## Read favorite\n",
    "Read the csv file created by ExportFavorite"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5a165167",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = WEAP.read_favorite(filename)\n",
    "df = WEAP.read_favorite(filename,unit='taf') #read favorite and convert the unit to taf. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2a2ba046",
   "metadata": {},
   "source": [
    "## Read and modify WEAP expression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c5778e34",
   "metadata": {},
   "outputs": [],
   "source": [
    "# get WEAP expression.\n",
    "branch = \"Other Assumptions\\\\Ops\\\\CVPSWP\\\\CVP Allocations\\\\System\\\\DemandIndex\"\n",
    "expression = weapapi.get_expression(branch)\n",
    "# set WEAP expression: modify the above expression\n",
    "new_expression = expression.replace('4171','4371')\n",
    "weapapi.set_expression(branch,new_expression)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
